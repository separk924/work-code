{"ast":null,"code":"import { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $e40ea825a81a3709$export$52baac22726c72bf extends Set {\n  constructor(keys, anchorKey, currentKey) {\n    super(keys);\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n  for (let item of setA) {\n    if (!setB.has(item)) return false;\n  }\n  return true;\n}\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  let {\n    selectionMode = \"none\",\n    disallowEmptySelection: disallowEmptySelection,\n    allowDuplicateSelectionEvents: allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = \"toggle\",\n    disabledBehavior = \"all\"\n  } = props;\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = (0, $Qsto2$useRef)(false);\n  let [, setFocused] = (0, $Qsto2$useState)(false);\n  let focusedKeyRef = (0, $Qsto2$useRef)(null);\n  let childFocusStrategyRef = (0, $Qsto2$useRef)(null);\n  let [, setFocusedKey] = (0, $Qsto2$useState)(null);\n  let selectedKeysProp = (0, $Qsto2$useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = (0, $Qsto2$useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new (0, $e40ea825a81a3709$export$52baac22726c72bf)()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = (0, $Qsto2$useControlledState)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);\n  let disabledKeysProp = (0, $Qsto2$useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = (0, $Qsto2$useState)(selectionBehaviorProp);\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === \"replace\" && selectionBehavior === \"toggle\" && typeof selectedKeys === \"object\" && selectedKeys.size === 0) setSelectionBehavior(\"replace\");\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = (0, $Qsto2$useRef)(selectionBehaviorProp);\n  (0, $Qsto2$useEffect)(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k) {\n      let childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"first\";\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === \"all\" ? \"all\" : new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selection);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {\n  /**\n  * The type of selection that is allowed in the collection.\n  */\n  get selectionMode() {\n    return this.state.selectionMode;\n  }\n  /**\n  * Whether the collection allows empty selection.\n  */\n  get disallowEmptySelection() {\n    return this.state.disallowEmptySelection;\n  }\n  /**\n  * The selection behavior for the collection.\n  */\n  get selectionBehavior() {\n    return this.state.selectionBehavior;\n  }\n  /**\n  * Sets the selection behavior for the collection.\n  */\n  setSelectionBehavior(selectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n  /**\n  * Whether the collection is currently focused.\n  */\n  get isFocused() {\n    return this.state.isFocused;\n  }\n  /**\n  * Sets whether the collection is focused.\n  */\n  setFocused(isFocused) {\n    this.state.setFocused(isFocused);\n  }\n  /**\n  * The current focused key in the collection.\n  */\n  get focusedKey() {\n    return this.state.focusedKey;\n  }\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy() {\n    return this.state.childFocusStrategy;\n  }\n  /**\n  * Sets the focused key.\n  */\n  setFocusedKey(key, childFocusStrategy) {\n    if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n  }\n  /**\n  * The currently selected keys in the collection.\n  */\n  get selectedKeys() {\n    return this.state.selectedKeys === \"all\" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n  }\n  /**\n  * The raw selection value for the collection.\n  * Either 'all' for select all, or a set of keys.\n  */\n  get rawSelection() {\n    return this.state.selectedKeys;\n  }\n  /**\n  * Returns whether a key is selected.\n  */\n  isSelected(key) {\n    if (this.state.selectionMode === \"none\") return false;\n    key = this.getKey(key);\n    return this.state.selectedKeys === \"all\" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n  }\n  /**\n  * Whether the selection is empty.\n  */\n  get isEmpty() {\n    return this.state.selectedKeys !== \"all\" && this.state.selectedKeys.size === 0;\n  }\n  /**\n  * Whether all items in the collection are selected.\n  */\n  get isSelectAll() {\n    if (this.isEmpty) return false;\n    if (this.state.selectedKeys === \"all\") return true;\n    if (this._isSelectAll != null) return this._isSelectAll;\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n  get firstSelectedKey() {\n    let first = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n    }\n    return first === null || first === void 0 ? void 0 : first.key;\n  }\n  get lastSelectedKey() {\n    let last = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n    }\n    return last === null || last === void 0 ? void 0 : last.key;\n  }\n  get disabledKeys() {\n    return this.state.disabledKeys;\n  }\n  get disabledBehavior() {\n    return this.state.disabledBehavior;\n  }\n  /**\n  * Extends the selection to the given key.\n  */\n  extendSelection(toKey) {\n    if (this.selectionMode === \"none\") return;\n    if (this.selectionMode === \"single\") {\n      this.replaceSelection(toKey);\n      return;\n    }\n    toKey = this.getKey(toKey);\n    let selection;\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === \"all\") selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([toKey], toKey, toKey);else {\n      let selectedKeys = this.state.selectedKeys;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);\n      for (let key1 of this.getKeyRange(toKey, anchorKey)) if (this.canSelectItem(key1)) selection.add(key1);\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getKeyRange(from, to) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n      return this.getKeyRangeInternal(to, from);\n    }\n    return [];\n  }\n  getKeyRangeInternal(from, to) {\n    let keys = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === \"item\" || item.type === \"cell\" && this.allowsCellSelection) keys.push(key);\n      if (key === to) return keys;\n      key = this.collection.getKeyAfter(key);\n    }\n    return [];\n  }\n  getKey(key) {\n    let item = this.collection.getItem(key);\n    if (!item)\n      // ¯\\_(ツ)_/¯\n      return key;\n    // If cell selection is allowed, just return the key.\n    if (item.type === \"cell\" && this.allowsCellSelection) return key;\n    // Find a parent item to select\n    while (item.type !== \"item\" && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n    if (!item || item.type !== \"item\") return null;\n    return item.key;\n  }\n  /**\n  * Toggles whether the given key is selected.\n  */\n  toggleSelection(key) {\n    if (this.selectionMode === \"none\") return;\n    if (this.selectionMode === \"single\" && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n    key = this.getKey(key);\n    if (key == null) return;\n    let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === \"all\" ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n    if (this.disallowEmptySelection && keys.size === 0) return;\n    this.state.setSelectedKeys(keys);\n  }\n  /**\n  * Replaces the selection with only the given key.\n  */\n  replaceSelection(key) {\n    if (this.selectionMode === \"none\") return;\n    key = this.getKey(key);\n    if (key == null) return;\n    let selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([key], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    this.state.setSelectedKeys(selection);\n  }\n  /**\n  * Replaces the selection with the given keys.\n  */\n  setSelectedKeys(keys) {\n    if (this.selectionMode === \"none\") return;\n    let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === \"single\") break;\n      }\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getSelectAllKeys() {\n    let keys = [];\n    let addKeys = key => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === \"item\") keys.push(key);\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== \"item\")) addKeys([...item.childNodes][0].key);\n        }\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n  /**\n  * Selects all items in the collection.\n  */\n  selectAll() {\n    if (this.selectionMode === \"multiple\") this.state.setSelectedKeys(\"all\");\n  }\n  /**\n  * Removes all keys from the selection.\n  */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === \"all\" || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n  }\n  /**\n  * Toggles between select all and an empty selection.\n  */\n  toggleSelectAll() {\n    if (this.isSelectAll) this.clearSelection();else this.selectAll();\n  }\n  select(key, e) {\n    if (this.selectionMode === \"none\") return;\n    if (this.selectionMode === \"single\") {\n      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n    } else if (this.selectionBehavior === \"toggle\" || e && (e.pointerType === \"touch\" || e.pointerType === \"virtual\"))\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);else this.replaceSelection(key);\n  }\n  /**\n  * Returns whether the current selection is equal to the given selection.\n  */\n  isSelectionEqual(selection) {\n    if (selection === this.state.selectedKeys) return true;\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) return false;\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) return false;\n    }\n    for (let key1 of selectedKeys) {\n      if (!selection.has(key1)) return false;\n    }\n    return true;\n  }\n  canSelectItem(key) {\n    if (this.state.selectionMode === \"none\" || this.state.disabledKeys.has(key)) return false;\n    let item = this.collection.getItem(key);\n    if (!item || item.type === \"cell\" && !this.allowsCellSelection) return false;\n    return true;\n  }\n  isDisabled(key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === \"all\";\n  }\n  constructor(collection, state, options) {\n    this.collection = collection;\n    this.state = state;\n    var _options_allowsCellSelection;\n    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;\n    this._isSelectAll = null;\n  }\n}\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"mappings":"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","names":["$e40ea825a81a3709$export$52baac22726c72bf","Set","constructor","keys","anchorKey","currentKey","$7af3f5b51489e0b5$var$equalSets","setA","setB","size","item","has","$7af3f5b51489e0b5$export$253fe78d46329472","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","selectionBehavior","selectionBehaviorProp","disabledBehavior","isFocusedRef","setFocused","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","setSelectedKeys","onSelectionChange","disabledKeysProp","disabledKeys","setSelectionBehavior","lastSelectionBehavior","current","isFocused","f","focusedKey","childFocusStrategy","k","selection","defaultValue","$d496c0a20b6e58ec$export$6c8a5aaad13c9852","state","key","collection","getItem","getSelectAllKeys","rawSelection","isSelected","getKey","canSelectItem","isEmpty","isSelectAll","_isSelectAll","allKeys","every","firstSelectedKey","first","index","lastSelectedKey","last","extendSelection","toKey","replaceSelection","getKeyRange","delete","key1","add","from","to","fromItem","toItem","getKeyRangeInternal","type","allowsCellSelection","push","getKeyAfter","parentKey","toggleSelection","addKeys","hasChildNodes","childNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll","select","e","pointerType","isSelectionEqual","isDisabled","options","_options_allowsCellSelection"],"sources":["packages/@react-stately/selection/src/index.ts","packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {MultipleSelectionStateProps} from './useMultipleSelectionState';\nexport type {FocusState, SingleSelectionState, MultipleSelectionState, MultipleSelectionManager} from './types';\nexport {useMultipleSelectionState} from './useMultipleSelectionState';\nexport {SelectionManager} from './SelectionManager';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key | null, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}