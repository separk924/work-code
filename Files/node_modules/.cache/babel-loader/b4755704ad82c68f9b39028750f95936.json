{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */let $488c6ddbf4ef74c2$var$formatterCache = new Map();\nlet $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat(\"de-DE\", {\n    signDisplay: \"exceptZero\"\n  }).resolvedOptions().signDisplay === \"exceptZero\";\n  // eslint-disable-next-line no-empty\n} catch (e) {}\nlet $488c6ddbf4ef74c2$var$supportsUnit = false;\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat(\"de-DE\", {\n    style: \"unit\",\n    unit: \"degree\"\n  }).resolvedOptions().style === \"unit\";\n  // eslint-disable-next-line no-empty\n} catch (e1) {}\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst $488c6ddbf4ef74c2$var$UNITS = {\n  degree: {\n    narrow: {\n      default: \"\\xb0\",\n      \"ja-JP\": \" 度\",\n      \"zh-TW\": \"度\",\n      \"sl-SI\": \" \\xb0\"\n    }\n  }\n};\nclass $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */format(value) {\n    let res = \"\";\n    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);\n    if (this.options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n      var _UNITS_unit;\n      let {\n        unit: unit,\n        unitDisplay = \"short\",\n        locale: locale\n      } = this.resolvedOptions();\n      let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];\n      res += values[locale] || values.default;\n    }\n    return res;\n  }\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value) {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n  /** Formats a number range as a string. */\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === \"function\")\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === \"function\")\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [...startParts.map(p => ({\n      ...p,\n      source: \"startRange\"\n    })), {\n      type: \"literal\",\n      value: \" – \",\n      source: \"shared\"\n    }, ...endParts.map(p => ({\n      ...p,\n      source: \"endRange\"\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions() {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = {\n      ...options,\n      signDisplay: this.options.signDisplay\n    };\n    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === \"unit\") options = {\n      ...options,\n      style: \"unit\",\n      unit: this.options.unit,\n      unitDisplay: this.options.unitDisplay\n    };\n    return options;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n}\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let {\n    numberingSystem: numberingSystem\n  } = options;\n  if (numberingSystem && locale.indexOf(\"-u-nu-\") === -1) locale = `${locale}-u-nu-${numberingSystem}`;\n  if (options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n    var _UNITS_unit;\n    let {\n      unit: unit,\n      unitDisplay = \"short\"\n    } = options;\n    if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    options = {\n      ...options,\n      style: \"decimal\"\n    };\n  }\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n  if (signDisplay === \"auto\") return numberFormat.format(num);else if (signDisplay === \"never\") return numberFormat.format(Math.abs(num));else {\n    let needsPositiveSign = false;\n    if (signDisplay === \"always\") needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === \"exceptZero\") {\n      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;\n    }\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, \"\").replace(/\\u200e|\\u061C/, \"\");\n      if ([...minus].length !== 1) console.warn(\"@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case\");\n      let positive = negative.replace(noSign, \"!!!\").replace(minus, \"+\").replace(\"!!!\", noSign);\n      return positive;\n    } else return numberFormat.format(num);\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp(\"^.*\\\\(.*\\\\).*$\");\nconst $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [\"latn\", \"arab\", \"hanidec\"];\nclass $6c7bd7858deea686$export$cd11ab140839f11d {\n  /**\n  * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n  */\n  parse(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n  /**\n  * Returns whether the given string could potentially be a valid number. This should be used to\n  * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n  * of the minus/plus sign characters can be checked.\n  */\n  isValidPartialNumber(value, minValue, maxValue) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n  /**\n  * Returns a numbering system for which the given string is valid in the current locale.\n  * If no numbering system could be detected, the default numbering system for the current\n  * locale is returned.\n  */\n  getNumberingSystem(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.locale = locale;\n    this.options = options;\n  }\n}\nconst $6c7bd7858deea686$var$numberParserCache = new Map();\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes(\"-nu-\") && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS) if (numberingSystem !== defaultParser.options.numberingSystem) {\n      let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes(\"-u-\") ? \"-nu-\" : \"-u-nu-\") + numberingSystem, options);\n      if (parser.isValidPartialNumber(value)) return parser;\n    }\n  }\n  return defaultParser;\n}\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n  return parser;\n}\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass $6c7bd7858deea686$var$NumberParserImpl {\n  parse(value) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, \"\").replace(this.symbols.decimal, \".\").replace(this.symbols.minusSign, \"-\").replace(this.symbols.numeral, this.symbols.index);\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) return NaN;\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === \"accounting\" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === \"percent\") {\n      newValue /= 100;\n      var _this_options_maximumFractionDigits;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2);\n    }\n    return newValue;\n  }\n  sanitize(value) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, \"\");\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace(\"-\", this.symbols.minusSign);\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === \"arab\") {\n      value = value.replace(\",\", this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = $6c7bd7858deea686$var$replaceAll(value, \".\", this.symbols.group);\n    }\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === \"fr-FR\") value = $6c7bd7858deea686$var$replaceAll(value, \".\", String.fromCharCode(8239));\n    return value;\n  }\n  isValidPartialNumber(value) {\n    let minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n    let maxValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n    value = this.sanitize(value);\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) return false;\n    // Remove numerals, groups, and decimals\n    value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, \"\").replace(this.symbols.numeral, \"\").replace(this.symbols.decimal, \"\");\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n  }\n}\nconst $6c7bd7858deea686$var$nonLiteralParts = new Set([\"decimal\", \"fraction\", \"integer\", \"minusSign\", \"plusSign\", \"group\"]);\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n  var _allParts_find, _posAllParts_find, _allParts_find1, _allParts_find2;\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n  var _allParts_find_value;\n  let minusSign = (_allParts_find_value = (_allParts_find = allParts.find(p => p.type === \"minusSign\")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : \"-\";\n  let plusSign = (_posAllParts_find = posAllParts.find(p => p.type === \"plusSign\")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"exceptZero\" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"always\")) plusSign = \"+\";\n  let decimal = (_allParts_find1 = allParts.find(p => p.type === \"decimal\")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;\n  let group = (_allParts_find2 = allParts.find(p => p.type === \"group\")) === null || _allParts_find2 === void 0 ? void 0 : _allParts_find2.value;\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? new RegExp(\"[\\\\p{White_Space}]\", \"gu\") : new RegExp(`${sortedLiterals.join(\"|\")}|[\\\\p{White_Space}]`, \"gu\");\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join(\"\")}]`, \"g\");\n  let index = d => String(indexes.get(d));\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  // @ts-ignore\n  if (str.replaceAll)\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nexport { $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":{"version":3,"mappings":"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","names":["$488c6ddbf4ef74c2$var$formatterCache","Map","$488c6ddbf4ef74c2$var$supportsSignDisplay","Intl","NumberFormat","signDisplay","resolvedOptions","e","$488c6ddbf4ef74c2$var$supportsUnit","style","unit","e1","$488c6ddbf4ef74c2$var$UNITS","degree","narrow","default","$488c6ddbf4ef74c2$export$cc77c4ff7e8673c5","format","value","res","options","$488c6ddbf4ef74c2$export$711b50b3c525e0f2","numberFormatter","_UNITS_unit","unitDisplay","locale","values","formatToParts","formatRange","start","end","RangeError","formatRangeToParts","startParts","endParts","map","p","source","type","constructor","$488c6ddbf4ef74c2$var$getCachedNumberFormatter","numberingSystem","indexOf","Error","cacheKey","Object","entries","sort","a","b","join","has","get","set","numberFormat","num","Math","abs","needsPositiveSign","is","negative","noSign","minus","replace","length","console","warn","positive","$6c7bd7858deea686$var$CURRENCY_SIGN_REGEX","RegExp","$6c7bd7858deea686$var$NUMBERING_SYSTEMS","$6c7bd7858deea686$export$cd11ab140839f11d","parse","$6c7bd7858deea686$var$getNumberParserImpl","isValidPartialNumber","minValue","maxValue","getNumberingSystem","$6c7bd7858deea686$var$numberParserCache","defaultParser","$6c7bd7858deea686$var$getCachedNumberParser","includes","parser","$6c7bd7858deea686$var$NumberParserImpl","fullySanitizedValue","sanitize","$6c7bd7858deea686$var$replaceAll","symbols","group","decimal","minusSign","numeral","index","newValue","NaN","isNaN","currencySign","test","_this_options_maximumFractionDigits","toFixed","maximumFractionDigits","literals","String","fromCharCode","Infinity","startsWith","slice","plusSign","formatter","$6c7bd7858deea686$var$getSymbols","$6c7bd7858deea686$var$nonLiteralParts","Set","intlOptions","originalOptions","_allParts_find","_posAllParts_find","_allParts_find1","_allParts_find2","allParts","posAllParts","singularParts","_allParts_find_value","find","pluralLiterals","filter","$6c7bd7858deea686$var$escapeRegex","singularLiterals","sortedLiterals","numerals","useGrouping","reverse","indexes","d","i","str","replaceAll","split","string"],"sources":["packages/@internationalized/number/src/index.ts","packages/@internationalized/number/src/NumberFormatter.ts","packages/@internationalized/number/src/NumberParser.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {NumberFormatOptions} from './NumberFormatter';\n\nexport {NumberFormatter} from './NumberFormatter';\nexport {NumberParser} from './NumberParser';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\ninterface NumberRangeFormatPart extends Intl.NumberFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  /** Formats a number range as a string. */\n  formatRange(start: number, end: number): string {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start: number, end: number): NumberRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as NumberRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as NumberRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? \n      new RegExp('[\\\\p{White_Space}]', 'gu') :\n      new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"]},"metadata":{},"sourceType":"module"}