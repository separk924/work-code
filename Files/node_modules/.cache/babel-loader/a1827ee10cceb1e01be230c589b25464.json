{"ast":null,"code":"var _jsxFileName = \"/Users/seung/Documents/work code/Files/src/components/mainFunctional.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from 'styled-components';\nimport '../styles.css';\nimport starwars from \"../APIs/starwars\";\nimport covid from \"../APIs/covid\";\nimport cats from \"../APIs/cats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainFunctional() {\n  _s();\n  const [data, setData] = useState([]);\n  const [covidData, setCovidData] = useState([]);\n  const [catData, setCatData] = useState([]);\n\n  //   useEffect(() => {\n  //     starwars.getPeople().then((response) => {\n  //       console.log(\"response\", response);\n  //       setData(response);\n  //     });\n  //   }, []);\n\n  //     useEffect(() => {\n  //         covid.getCurrentCovidStats().then((resp) => {\n  //             console.log(\"response\", resp);\n  //             setCovidData(resp);\n  //         });\n  //     }, []);\n\n  //     useEffect(() => {\n  //         cats.get100Cats().then((resp) => {\n  //             console.log(\"response\", resp);\n  //             setCatData(resp);\n  //         });\n  //     }, []);\n\n  const Button = styled.button`\n    background: transparent;\n    border-radius: 3px;\n    border: 2px solid red;\n    color:red;\n    `;\n  const Body = styled.body`\n    background-color: #92D3BE;\n    `;\n  const myFont = styled.div`\n    font-family: \"century-gothic\";\n    `;\n  const headerStyle = {\n    textAlign: 'center',\n    fontFamily: myFont\n  };\n  function createSelectItems() {\n    let items = [];\n    for (let i = 0; i <= this.props.maxValue; i++) {\n      items.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: i,\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 24\n      }, this));\n      //here I will be creating my options dynamically based on\n      //what props are currently passed to the parent component\n    }\n\n    return items;\n  }\n  function onDropdownSelected(e) {\n    console.log(\"THE VAL\", e.target.value);\n    //here you will see the current selected value of the select input\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: headerStyle,\n      children: \"COVID STATS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"current-states\",\n      children: \"Choose Which State You Would Like To Choose:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"select\",\n      onChange: this.onDropdownSelected,\n      label: \"Multiple Select\",\n      multiple: true,\n      children: this.createSelectItems()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(MainFunctional, \"yn9JobMefkxIDoRQgG3iSfRvNuA=\");\n_c = MainFunctional;\nexport default MainFunctional;\nvar _c;\n$RefreshReg$(_c, \"MainFunctional\");","map":{"version":3,"names":["React","useState","useEffect","styled","starwars","covid","cats","MainFunctional","data","setData","covidData","setCovidData","catData","setCatData","Button","button","Body","body","myFont","div","headerStyle","textAlign","fontFamily","createSelectItems","items","i","props","maxValue","push","onDropdownSelected","e","console","log","target","value"],"sources":["/Users/seung/Documents/work code/Files/src/components/mainFunctional.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from 'styled-components';\nimport '../styles.css';\nimport starwars from \"../APIs/starwars\";\nimport covid from \"../APIs/covid\";\nimport cats from \"../APIs/cats\";\n\nfunction MainFunctional() {\n  const [data, setData] = useState([]);\n  const [covidData, setCovidData] = useState([]);\n  const [catData, setCatData] = useState([]);\n\n//   useEffect(() => {\n//     starwars.getPeople().then((response) => {\n//       console.log(\"response\", response);\n//       setData(response);\n//     });\n//   }, []);\n\n//     useEffect(() => {\n//         covid.getCurrentCovidStats().then((resp) => {\n//             console.log(\"response\", resp);\n//             setCovidData(resp);\n//         });\n//     }, []);\n\n//     useEffect(() => {\n//         cats.get100Cats().then((resp) => {\n//             console.log(\"response\", resp);\n//             setCatData(resp);\n//         });\n//     }, []);\n\n    const Button = styled.button`\n    background: transparent;\n    border-radius: 3px;\n    border: 2px solid red;\n    color:red;\n    `\n    const Body = styled.body`\n    background-color: #92D3BE;\n    `\n\n    const myFont = styled.div`\n    font-family: \"century-gothic\";\n    `;\n    const headerStyle = {\n        textAlign: 'center',\n        fontFamily: myFont,\n    };\n\n    function createSelectItems() {\n        let items = [];         \n        for (let i = 0; i <= this.props.maxValue; i++) {             \n            items.push(<option key={i} value={i}>{i}</option>);   \n            //here I will be creating my options dynamically based on\n            //what props are currently passed to the parent component\n        }\n        return items;\n    }  \n\n    function onDropdownSelected(e) {\n        console.log(\"THE VAL\", e.target.value);\n        //here you will see the current selected value of the select input\n    }\n\n  return (\n    <div className=\"App\">\n    <h1 style={headerStyle} >\n        COVID STATS\n    </h1>\n    <label for=\"current-states\">Choose Which State You Would Like To Choose:</label>\n    <Input type=\"select\" onChange={this.onDropdownSelected} label=\"Multiple Select\" multiple>\n       {this.createSelectItems()}\n    </Input>\n        {/* {covidData.map(item => {\n            return <li key={item.state}>\n                deaths: {item.death}\n                </li>\n        })} */}\n    </div>\n  );\n}\n\nexport default MainFunctional;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAO,eAAe;AACtB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,IAAI,MAAM,cAAc;AAAC;AAEhC,SAASC,cAAc,GAAG;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEI,MAAMa,MAAM,GAAGX,MAAM,CAACY,MAAO;AACjC;AACA;AACA;AACA;AACA,KAAK;EACD,MAAMC,IAAI,GAAGb,MAAM,CAACc,IAAK;AAC7B;AACA,KAAK;EAED,MAAMC,MAAM,GAAGf,MAAM,CAACgB,GAAI;AAC9B;AACA,KAAK;EACD,MAAMC,WAAW,GAAG;IAChBC,SAAS,EAAE,QAAQ;IACnBC,UAAU,EAAEJ;EAChB,CAAC;EAED,SAASK,iBAAiB,GAAG;IACzB,IAAIC,KAAK,GAAG,EAAE;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,CAACC,KAAK,CAACC,QAAQ,EAAEF,CAAC,EAAE,EAAE;MAC3CD,KAAK,CAACI,IAAI,eAAC;QAAgB,KAAK,EAAEH,CAAE;QAAA,UAAEA;MAAC,GAAfA,CAAC;QAAA;QAAA;QAAA;MAAA,QAAwB,CAAC;MAClD;MACA;IACJ;;IACA,OAAOD,KAAK;EAChB;EAEA,SAASK,kBAAkB,CAACC,CAAC,EAAE;IAC3BC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC;IACtC;EACJ;;EAEF,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBACpB;MAAI,KAAK,EAAEd,WAAY;MAAA,UAAE;IAEzB;MAAA;MAAA;MAAA;IAAA,QAAK,eACL;MAAO,GAAG,EAAC,gBAAgB;MAAA,UAAC;IAA4C;MAAA;MAAA;MAAA;IAAA,QAAQ,eAChF,QAAC,KAAK;MAAC,IAAI,EAAC,QAAQ;MAAC,QAAQ,EAAE,IAAI,CAACS,kBAAmB;MAAC,KAAK,EAAC,iBAAiB;MAAC,QAAQ;MAAA,UACpF,IAAI,CAACN,iBAAiB;IAAE;MAAA;MAAA;MAAA;IAAA,QACpB;EAAA;IAAA;IAAA;IAAA;EAAA,QAMF;AAEV;AAAC,GA3EQhB,cAAc;AAAA,KAAdA,cAAc;AA6EvB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module"}