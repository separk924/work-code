{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nexport default function makeTable(selection) {\n  _s();\n  if (selection == \"people\") {\n    // People Table Columns\n    const columns = useMemo(() => [{\n      Header: \"Name\",\n      accessor: \"name\"\n    }, {\n      Header: \"Birth Date\",\n      accessor: \"birth_year\"\n    }, {\n      Header: \"Gender\",\n      accessor: \"gender\"\n    }, {\n      Header: \"Hair Color\",\n      accessor: \"hair_color\"\n    }, {\n      Header: \"Height\",\n      accessor: \"height\"\n    }, {\n      Header: \"Weight (Kilo)\",\n      accessor: \"mass\"\n    }], []);\n  }\n  if (selection == \"Planets\") {\n    // Planet Table Columns\n    const columns = useMemo(() => [{\n      Header: \"Name\",\n      accessor: \"name\"\n    }, {\n      Header: \"Climate\",\n      accessor: \"climate\"\n    }, {\n      Header: \"Diameter (Kilometers)\",\n      accessor: \"diameter\"\n    }, {\n      Header: \"Gravity\",\n      accessor: \"gravity\"\n    }, {\n      Header: \"Orbital Period (days)\",\n      accessor: \"orbital_period\"\n    }, {\n      Header: \"Population\",\n      accessor: \"population\"\n    }, {\n      Header: \"Rotation Period (hrs)\",\n      accessor: \"rotation_period\"\n    }, {\n      Header: \"Surface Water (%)\",\n      accessor: \"surface_water\"\n    }, {\n      Header: \"Terrain\",\n      accessor: \"terrain\"\n    }], []);\n  }\n  if (selection == \"Starships\") {\n    // Planet Starship Columns\n    const columns = useMemo(() => [{\n      Header: \"Name\",\n      accessor: \"name\"\n    }, {\n      Header: \"Model\",\n      accessor: \"model\"\n    }, {\n      Header: \"Manufacturer\",\n      accessor: \"manufacturer\"\n    }, {\n      Header: \"Starship Class\",\n      accessor: \"starship_class\"\n    }, {\n      Header: \"Speed (# of Megalights/Hr)\",\n      accessor: \"MGLT\"\n    }, {\n      Header: \"Length (meters)\",\n      accessor: \"length\"\n    }, {\n      Header: \"Passenger Capacity (non-essential)\",\n      accessor: \"passengers\"\n    }, {\n      Header: \"Max Atmosphering Speed (n/a if not possible)\",\n      accessor: \"max_atmosphering_speed\"\n    }, {\n      Header: \"Cargo Capacity (Kilo)\",\n      accessor: \"cargo_capacity\"\n    }, {\n      Header: \"Cost (galactic credits)\",\n      accessor: \"cost_in_credits\"\n    }, {\n      Header: \"Crew\",\n      accessor: \"crew\"\n    }, {\n      Header: \"Hyperdrive Rating\",\n      accessor: \"hyperdrive_rating\"\n    }], []);\n  }\n  if (selection == \"Films\") {\n    // People Film Columns\n    const columns = useMemo(() => [{\n      Header: \"Title\",\n      accessor: \"title\"\n    }, {\n      Header: \"Director\",\n      accessor: \"director\"\n    }, {\n      Header: \"Producer\",\n      accessor: \"producer\"\n    }, {\n      Header: \"Release Date\",\n      accessor: \"release_date\"\n    }], []);\n  }\n  if (selection == \"Species\") {\n    // People Species Columns\n    const columns = useMemo(() => [{\n      Header: \"Name\",\n      accessor: \"name\"\n    }, {\n      Header: \"Skin Color\",\n      accessor: \"skin_colors\"\n    }, {\n      Header: \"Eye Colors\",\n      accessor: \"eye_colors\"\n    }, {\n      Header: \"Hair Colors\",\n      accessor: \"hair_colors\"\n    }, {\n      Header: \"Language\",\n      accessor: \"language\"\n    }, {\n      Header: \"Designation\",\n      accessor: \"designation\"\n    }, {\n      Header: \"Classification\",\n      accessor: \"classification\"\n    }, {\n      Header: \"Average Height (centimeters)\",\n      accessor: \"average_height\"\n    }, {\n      Header: \"Average Lifespan (years)\",\n      accessor: \"average_lifespan\"\n    }], []);\n  }\n  if (selection == \"Vehicles\") {\n    // People Vehicles Columns\n    const columns = useMemo(() => [{\n      Header: \"Name\",\n      accessor: \"name\"\n    }, {\n      Header: \"Model\",\n      accessor: \"model\"\n    }, {\n      Header: \"Manufacturer\",\n      accessor: \"manufacturer\"\n    }, {\n      Header: \"Vehicle Class\",\n      accessor: \"vehicle_class\"\n    }, {\n      Header: \"Cargo Capacity (kilos)\",\n      accessor: \"cargo_capacity\"\n    }, {\n      Header: \"Consumable Capacity\",\n      accessor: \"consumables\"\n    }, {\n      Header: \"Crew Size\",\n      accessor: \"crew\"\n    }, {\n      Header: \"Passenger Capacity\",\n      accessor: \"passengers\"\n    }, {\n      Header: \"Length (meters)\",\n      accessor: \"length\"\n    }], []);\n  }\n  return columns;\n}\n_s(makeTable, \"vhmqNVvPqzpQNVQIPpt66tcjnOo=\");","map":{"version":3,"names":["React","useMemo","makeTable","selection","columns","Header","accessor"],"sources":["/Users/seung/Documents/work code/Files/src/tableData.js"],"sourcesContent":["import React, { useMemo } from \"react\";\n\nexport default function makeTable(selection){\n    if(selection == \"people\") {\n        // People Table Columns\n        const columns = useMemo(\n            () => [\n                    {\n                        Header: \"Name\",\n                        accessor: \"name\",\n                    },\n                    {\n                        Header: \"Birth Date\",\n                        accessor: \"birth_year\",\n                    },\n                    {\n                        Header: \"Gender\",\n                        accessor: \"gender\",\n                    },\n                    {\n                        Header: \"Hair Color\",\n                        accessor: \"hair_color\",\n                    },\n                    {\n                        Header: \"Height\",\n                        accessor: \"height\",\n                    },\n                    {\n                        Header: \"Weight (Kilo)\",\n                        accessor: \"mass\",\n                    },\n                ], []\n        );\n    }\n\n    if(selection == \"Planets\") {\n        // Planet Table Columns\n        const columns = useMemo(\n            () => [\n                    {\n                        Header: \"Name\",\n                        accessor: \"name\",\n                    },\n                    {\n                        Header: \"Climate\",\n                        accessor: \"climate\",\n                    },\n                    {\n                        Header: \"Diameter (Kilometers)\",\n                        accessor: \"diameter\",\n                    },\n                    {\n                        Header: \"Gravity\",\n                        accessor: \"gravity\",\n                    },\n                    {\n                        Header: \"Orbital Period (days)\",\n                        accessor: \"orbital_period\",\n                    },\n                    {\n                        Header: \"Population\",\n                        accessor: \"population\",\n                    },\n                    {\n                        Header: \"Rotation Period (hrs)\",\n                        accessor: \"rotation_period\",\n                    },\n                    {\n                        Header: \"Surface Water (%)\",\n                        accessor: \"surface_water\",\n                    },\n                    {\n                        Header: \"Terrain\",\n                        accessor: \"terrain\",\n                    },\n                ], []\n        );\n    }\n\n    if(selection == \"Starships\") {\n        // Planet Starship Columns\n        const columns = useMemo(\n            () => [\n                    {\n                        Header: \"Name\",\n                        accessor: \"name\",\n                    },\n                    {\n                        Header: \"Model\",\n                        accessor: \"model\",\n                    },\n                    {\n                        Header: \"Manufacturer\",\n                        accessor: \"manufacturer\",\n                    },\n                    {\n                        Header: \"Starship Class\",\n                        accessor: \"starship_class\",\n                    },\n                    {\n                        Header: \"Speed (# of Megalights/Hr)\",\n                        accessor: \"MGLT\",\n                    },\n                    {\n                        Header: \"Length (meters)\",\n                        accessor: \"length\",\n                    },\n                    {\n                        Header: \"Passenger Capacity (non-essential)\",\n                        accessor: \"passengers\",\n                    },\n                    {\n                        Header: \"Max Atmosphering Speed (n/a if not possible)\",\n                        accessor: \"max_atmosphering_speed\",\n                    },\n                    {\n                        Header: \"Cargo Capacity (Kilo)\",\n                        accessor: \"cargo_capacity\",\n                    },\n                    {\n                        Header: \"Cost (galactic credits)\",\n                        accessor: \"cost_in_credits\",\n                    },\n                    {\n                        Header: \"Crew\",\n                        accessor: \"crew\",\n                    },\n                    {\n                        Header: \"Hyperdrive Rating\",\n                        accessor: \"hyperdrive_rating\",\n                    },\n                ], []\n        );\n    }\n\n    if(selection == \"Films\") {\n        // People Film Columns\n        const columns = useMemo(\n            () => [\n                    {\n                        Header: \"Title\",\n                        accessor: \"title\",\n                    },\n                    {\n                        Header: \"Director\",\n                        accessor: \"director\",\n                    },\n                    {\n                        Header: \"Producer\",\n                        accessor: \"producer\",\n                    },\n                    {\n                        Header: \"Release Date\",\n                        accessor: \"release_date\",\n                    },\n                ], []\n        );\n    }\n\n    if(selection == \"Species\") {\n        // People Species Columns\n        const columns = useMemo(\n            () => [\n                    {\n                        Header: \"Name\",\n                        accessor: \"name\",\n                    },\n                    {\n                        Header: \"Skin Color\",\n                        accessor: \"skin_colors\",\n                    },\n                    {\n                        Header: \"Eye Colors\",\n                        accessor: \"eye_colors\",\n                    },\n                    {\n                        Header: \"Hair Colors\",\n                        accessor: \"hair_colors\",\n                    },\n                    {\n                        Header: \"Language\",\n                        accessor: \"language\",\n                    },\n                    {\n                        Header: \"Designation\",\n                        accessor: \"designation\",\n                    },\n                    {\n                        Header: \"Classification\",\n                        accessor: \"classification\",\n                    },\n                    {\n                        Header: \"Average Height (centimeters)\",\n                        accessor: \"average_height\",\n                    },\n                    {\n                        Header: \"Average Lifespan (years)\",\n                        accessor: \"average_lifespan\",\n                    },\n                ], []\n        );\n    }\n\n    if(selection == \"Vehicles\") {\n        // People Vehicles Columns\n        const columns = useMemo(\n            () => [\n                    {\n                        Header: \"Name\",\n                        accessor: \"name\",\n                    },\n                    {\n                        Header: \"Model\",\n                        accessor: \"model\",\n                    },\n                    {\n                        Header: \"Manufacturer\",\n                        accessor: \"manufacturer\",\n                    },\n                    {\n                        Header: \"Vehicle Class\",\n                        accessor: \"vehicle_class\",\n                    },\n                    {\n                        Header: \"Cargo Capacity (kilos)\",\n                        accessor: \"cargo_capacity\",\n                    },\n                    {\n                        Header: \"Consumable Capacity\",\n                        accessor: \"consumables\",\n                    },\n                    {\n                        Header: \"Crew Size\",\n                        accessor: \"crew\",\n                    },\n                    {\n                        Header: \"Passenger Capacity\",\n                        accessor: \"passengers\",\n                    },\n                    {\n                        Header: \"Length (meters)\",\n                        accessor: \"length\",\n                    },\n                ], []\n        );\n    }\n\n    return columns\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}