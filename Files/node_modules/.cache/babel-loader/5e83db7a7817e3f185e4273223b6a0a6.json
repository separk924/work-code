{"ast":null,"code":"import $1DoQa$intlmessageformat from \"intl-messageformat\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nclass $d6fd23bc337660df$export$64839e615120df17 {\n  getStringForLocale(key, locale) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n  constructor(messages) {\n    let defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"en-US\";\n    // Clone messages so we don't modify the original object.\n    this.messages = {\n      ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n}\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings) {\n  let defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"en-US\";\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = $d6fd23bc337660df$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (let key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale)\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $972eb555d604f491$export$526ebc05ff964723 {\n  format(key, variables) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      message = new (0, $1DoQa$intlmessageformat)(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy;\n    if (variables) varCopy = Object.keys(variables).reduce((acc, key) => {\n      acc[key] = variables[key] == null ? false : variables[key];\n      return acc;\n    }, {});\n    return message.format(varCopy);\n  }\n  constructor(locale, messages) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n}\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary, $972eb555d604f491$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;ACAA,GDAA,CCAA;;;;;;;;;;;AAYA,MAUaA;EAUXC,mBAAmBC,GAAW,EAAEC,MAAc,EAAE;IAC9C,IAAIC,UAAU,IAAI,CAACC,QAAQ,CAACF,OAAO;IACnC,IAAI,CAACC,SAAS;MACZA,UAAUE,0CAAoBH,QAAQ,IAAI,CAACE,QAAQ,EAAE,IAAI,CAACE,aAAa;MACvE,IAAI,CAACF,QAAQ,CAACF,OAAO,GAAGC;IAC1B;IAEA,IAAII,SAASJ,OAAO,CAACF,IAAI;IACzB,IAAI,CAACM,QACH,MAAM,IAAIC,MAAO,+BAA8BP,GAAI,OAAMC,MAAO,SAAQ;IAG1E,OAAOK;EACT;EAnBAE,YAAYL,QAA0B,EAAmC;IAAA,IAAjCE,oFAAwB,OAAO;IACrE;IACA,IAAI,CAACF,QAAQ,GAAG;MAAC,GAAGA;IAAQ;IAC5B,IAAI,CAACE,aAAa,GAAGA;EACvB;AAgBF;AAEA,SAASD,0CAAoBH,MAAc,EAAEC,OAAyB,EAA2B;EAAA,IAAzBG,oFAAgB,OAAO;EAC7F;EACA,IAAIH,OAAO,CAACD,OAAO,EACjB,OAAOC,OAAO,CAACD,OAAO;EAGxB;EACA;EACA;EACA;EACA;EACA,IAAIQ,WAAWC,kCAAYT;EAC3B,IAAIC,OAAO,CAACO,SAAS,EACnB,OAAOP,OAAO,CAACO,SAAS;EAG1B,KAAK,IAAIT,OAAOE,SAAS;IACvB,IAAIF,IAAIW,UAAU,CAACF,WAAW,MAC5B,OAAOP,OAAO,CAACF,IAAI;EAEvB;EAEA;EACA,OAAOE,OAAO,CAACG,cAAc;AAC/B;AAEA,SAASK,kCAAYT,MAAc,EAAE;EACnC;EACA,IAAIW,KAAKC,MAAM;IACb;IACA,OAAO,IAAID,KAAKC,MAAM,CAACZ,QAAQQ,QAAQ;EAGzC,OAAOR,OAAOa,KAAK,CAAC,IAAI,CAAC,EAAE;AAC7B;;AClFA;;;;;;;;;;;AAmBO,MAAMC;EAWXC,OAAiBhB,GAAW,EAAEiB,SAA6G,EAAE;IAC3I,IAAIC,UAAU,IAAI,CAACC,KAAK,CAACnB,IAAI;IAC7B,IAAI,CAACkB,SAAS;MACZ,IAAIE,MAAM,IAAI,CAACjB,QAAQ,CAACJ,kBAAkB,CAACC,KAAK,IAAI,CAACC,MAAM;MAC3D,IAAI,CAACmB,KACH,MAAM,IAAIb,MAAO,+BAA8BP,GAAI,OAAM,IAAI,CAACC,MAAO,SAAQ;MAG/EiB,UAAU,KAAI,2BAAgB,EAAEE,KAAK,IAAI,CAACnB,MAAM;MAChD,IAAI,CAACkB,KAAK,CAACnB,IAAI,GAAGkB;IACpB;IACA,IAAIG;IACJ,IAAIJ,WACFI,UAAUC,OAAOC,IAAI,CAACN,WAAWO,MAAM,CAAC,CAACC,KAAKzB,QAAQ;MACpDyB,GAAG,CAACzB,IAAI,GAAGiB,SAAS,CAACjB,IAAI,IAAI,IAAI,GAAG,KAAK,GAAGiB,SAAS,CAACjB,IAAI;MAC1D,OAAOyB;IACT,GAAG,CAAC;IAGN,OAAOP,QAAQF,MAAM,CAACK;EACxB;EA1BAb,YAAYP,MAAc,EAAEE,QAA2B,EAAE;IACvD,IAAI,CAACF,MAAM,GAAGA;IACd,IAAI,CAACE,QAAQ,GAAGA;IAChB,IAAI,CAACgB,KAAK,GAAG,CAAC;EAChB;AAuBF","names":["$d6fd23bc337660df$export$64839e615120df17","getStringForLocale","key","locale","strings","messages","$d6fd23bc337660df$var$getStringsForLocale","defaultLocale","string","Error","constructor","language","$d6fd23bc337660df$var$getLanguage","startsWith","Intl","Locale","split","$972eb555d604f491$export$526ebc05ff964723","format","variables","message","cache","msg","varCopy","Object","keys","reduce","acc"],"sources":["packages/@internationalized/message/src/index.ts","packages/@internationalized/message/src/MessageDictionary.ts","packages/@internationalized/message/src/MessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {LocalizedStrings} from './MessageDictionary';\nexport {MessageDictionary} from './MessageDictionary';\nexport {MessageFormatter} from './MessageFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}