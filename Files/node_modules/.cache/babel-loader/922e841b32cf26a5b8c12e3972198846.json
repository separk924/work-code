{"ast":null,"code":"import $6nfFC$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\nimport $6nfFC$react, { useRef as $6nfFC$useRef, useContext as $6nfFC$useContext, useMemo as $6nfFC$useMemo, useEffect as $6nfFC$useEffect, useState as $6nfFC$useState, useCallback as $6nfFC$useCallback } from \"react\";\nimport { useLayoutEffect as $6nfFC$useLayoutEffect, runAfterTransition as $6nfFC$runAfterTransition, focusWithoutScrolling as $6nfFC$focusWithoutScrolling, mergeProps as $6nfFC$mergeProps, useSyncRef as $6nfFC$useSyncRef } from \"@react-aria/utils\";\nimport { getInteractionModality as $6nfFC$getInteractionModality, isFocusVisible as $6nfFC$isFocusVisible, useFocusVisibleListener as $6nfFC$useFocusVisibleListener, useFocus as $6nfFC$useFocus, useFocusWithin as $6nfFC$useFocusWithin, useKeyboard as $6nfFC$useKeyboard } from \"@react-aria/interactions\";\nimport $6nfFC$clsx from \"clsx\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $6a99195332edec8b$export$80f3e147d781571c(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if ((0, $6nfFC$getInteractionModality)() === \"virtual\") {\n    let lastFocusedElement = document.activeElement;\n    (0, $6nfFC$runAfterTransition)(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) (0, $6nfFC$focusWithoutScrolling)(element);\n    });\n  } else (0, $6nfFC$focusWithoutScrolling)(element);\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $645f2e67b85a24c9$var$isStyleVisible(element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;\n  let {\n    display: display,\n    visibility: visibility\n  } = element.style;\n  let isVisible = display !== \"none\" && visibility !== \"hidden\" && visibility !== \"collapse\";\n  if (isVisible) {\n    const {\n      getComputedStyle: getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== \"none\" && computedVisibility !== \"hidden\" && computedVisibility !== \"collapse\";\n  }\n  return isVisible;\n}\nfunction $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute(\"hidden\") && (element.nodeName === \"DETAILS\" && childElement && childElement.nodeName !== \"SUMMARY\" ? element.hasAttribute(\"open\") : true);\n}\nfunction $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {\n  return element.nodeName !== \"#comment\" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));\n}\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $6nfFC$useRef)();\n  let endRef = (0, $6nfFC$useRef)();\n  let scopeRef = (0, $6nfFC$useRef)([]);\n  let {\n    parentNode: parentNode\n  } = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext) || {};\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = (0, $6nfFC$useMemo)(() => new $9bf71ea28793e738$var$TreeNode({\n    scopeRef: scopeRef\n  }), [scopeRef]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n      if (activeNode) parent = activeNode;\n    }\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n  }, [node, parentNode]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    node.contain = contain;\n  }, [contain]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n    scopeRef.current = nodes;\n  }, [children]);\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);\n  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n  (0, $6nfFC$useEffect)(() => {\n    if (scopeRef) {\n      let activeElement = document.activeElement;\n      let scope = null;\n      // In strict mode, active scope is incorrectly updated since cleanup will run even though scope hasn't unmounted.\n      // To fix this, we need to update the actual activeScope here\n      if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n        // Since useLayoutEffect runs for children first, we need to traverse the focusScope tree and find the bottom most scope that\n        // contains the active element and set that as the activeScope\n        for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if ($9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n        if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n      }\n      return () => {\n        // Scope may have been re-parented.\n        let parentScope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef;\n        // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n        if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef]);\n  let focusManager = (0, $6nfFC$useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n  let value = (0, $6nfFC$useMemo)(() => ({\n    focusManager: focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n  return (_useContext = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n  };\n}\nconst $9bf71ea28793e738$var$focusableElements = [\"input:not([disabled]):not([type=hidden])\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"button:not([disabled])\", \"a[href]\", \"area[href]\", \"summary\", \"iframe\", \"object\", \"embed\", \"audio[controls]\", \"video[controls]\", \"[contenteditable]\"];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(\":not([hidden]),\") + \",[tabindex]:not([disabled]):not([hidden])\";\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n  return true;\n}\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $6nfFC$useRef)();\n  let raf = (0, $6nfFC$useRef)(null);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: true\n      }, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n    };\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) cancelAnimationFrame(raf.current);\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n    document.addEventListener(\"keydown\", onKeyDown, false);\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    scope.forEach(element => element.addEventListener(\"focusout\", onBlur, false));\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyDown, false);\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n      scope.forEach(element => element.removeEventListener(\"focusout\", onBlur, false));\n    };\n  }, [scopeRef, contain]);\n  // eslint-disable-next-line arrow-body-style\n  (0, $6nfFC$useEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\nfunction $9bf71ea28793e738$var$isElementInChildScope(element) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest(\"[data-react-aria-top-layer]\")) return true;\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if ($9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$var$focusElement(element) {\n  let scroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (element != null && !scroll) try {\n    (0, $6a99195332edec8b$export$80f3e147d781571c)(element);\n  } catch (err) {\n    // ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err1) {\n    // ignore\n  }\n}\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope) {\n  let tabbable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let sentinel = scope[0].previousElementSibling;\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n  $9bf71ea28793e738$var$focusElement(nextNode);\n}\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $6nfFC$react).useRef(autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n    let onFocus = e => {\n      let target = e.target;\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = (0, $6nfFC$useRef)(typeof document !== \"undefined\" ? document.activeElement : null);\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) return;\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (!restoreFocus) return;\n    $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey) return;\n      let focusedElement = document.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {\n        tabbable: true\n      });\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;\n      }\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n    if (!contain) document.addEventListener(\"keydown\", onKeyDown, true);\n    return () => {\n      if (!contain) document.removeEventListener(\"keydown\", onKeyDown, true);\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (restoreFocus && nodeToRestore && (\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from;\n      // Skip nodes inside the starting node.\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next;\n      }\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = $9bf71ea28793e738$var$last(walker);\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next;\n    }\n  };\n}\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n  addNode(node) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.size > 0) children.forEach(child => parentNode.addChild(child));\n    this.fastMap.delete(node.scopeRef);\n  }\n  // Pre Order Depth First\n  traverse() {\n    var _this = this;\n    let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root;\n    return function* () {\n      if (node.scopeRef != null) yield node;\n      if (node.children.size > 0) for (let child of node.children) yield* _this.traverse(child);\n    }();\n  }\n  clone() {\n    let newTree = new $9bf71ea28793e738$var$Tree();\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n    return newTree;\n  }\n  constructor() {\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"fastMap\", new Map());\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n}\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n  constructor(props) {\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"children\", new Set());\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"contain\", false);\n    this.scopeRef = props.scopeRef;\n  }\n}\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = (0, $6nfFC$useRef)({\n    isFocused: false,\n    isFocusVisible: autoFocus || (0, $6nfFC$isFocusVisible)()\n  });\n  let [isFocused, setFocused] = (0, $6nfFC$useState)(false);\n  let [isFocusVisibleState, setFocusVisible] = (0, $6nfFC$useState)(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = (0, $6nfFC$useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = (0, $6nfFC$useCallback)(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  (0, $6nfFC$useFocusVisibleListener)(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $6nfFC$useFocusWithin)({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\nfunction $907718708eab68af$export$1a38b4ad7f578e1d(props) {\n  let {\n    children: children,\n    focusClass: focusClass,\n    focusRingClass: focusRingClass\n  } = props;\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $f7dceffc5ad7768b$export$4e328f61c538687f)(props);\n  let child = (0, $6nfFC$react).Children.only(children);\n  return /*#__PURE__*/(0, $6nfFC$react).cloneElement(child, (0, $6nfFC$mergeProps)(child.props, {\n    ...focusProps,\n    className: (0, $6nfFC$clsx)({\n      [focusClass || \"\"]: isFocused,\n      [focusRingClass || \"\"]: isFocusVisible\n    })\n  }));\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\nfunction $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {\n  let context = (0, $6nfFC$useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};\n  (0, $6nfFC$useSyncRef)(context, ref);\n  // eslint-disable-next-line\n  let {\n    ref: _,\n    ...otherProps\n  } = context;\n  return otherProps;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {\n  let {\n    children: children,\n    ...otherProps\n  } = props;\n  let context = {\n    ...otherProps,\n    ref: ref\n  };\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\nlet $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/(0, $6nfFC$react).forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);\nfunction $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)(props);\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $6nfFC$useKeyboard)(props);\n  let interactions = (0, $6nfFC$mergeProps)(focusProps, keyboardProps);\n  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = (0, $6nfFC$useRef)(props.autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current && domRef.current) (0, $6a99195332edec8b$export$80f3e147d781571c)(domRef.current);\n    autoFocusRef.current = false;\n  }, [domRef]);\n  return {\n    focusableProps: (0, $6nfFC$mergeProps)({\n      ...interactions,\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }, interactionProps)\n  };\n}\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $907718708eab68af$export$1a38b4ad7f578e1d as FocusRing, $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 as FocusableProvider, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c as useFocusable, $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing, $6a99195332edec8b$export$80f3e147d781571c as focusSafely };","map":{"version":3,"mappings":"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","names":["$6a99195332edec8b$export$80f3e147d781571c","element","lastFocusedElement","document","activeElement","contains","$645f2e67b85a24c9$var$isStyleVisible","HTMLElement","SVGElement","display","visibility","style","isVisible","getComputedStyle","ownerDocument","defaultView","computedDisplay","computedVisibility","$645f2e67b85a24c9$var$isAttributeVisible","childElement","hasAttribute","nodeName","$645f2e67b85a24c9$export$e989c0fffaa6b27a","parentElement","$9bf71ea28793e738$var$FocusContext","createContext","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$export$20e40289641fbbb6","props","children","contain","restoreFocus","autoFocus","startRef","endRef","scopeRef","parentNode","node","$9bf71ea28793e738$var$TreeNode","parent","$9bf71ea28793e738$export$d06fae2ee68b101e","root","getTreeNode","$9bf71ea28793e738$var$isAncestorScope","activeNode","addChild","addNode","current","nextSibling","nodes","push","$9bf71ea28793e738$var$useActiveScopeTracker","$9bf71ea28793e738$var$useFocusContainment","$9bf71ea28793e738$var$useRestoreFocus","$9bf71ea28793e738$var$useAutoFocus","scope","$9bf71ea28793e738$var$isElementInScope","traverse","parentScope","removeTreeNode","focusManager","$9bf71ea28793e738$var$createFocusManagerForScope","value","Provider","hidden","ref","$9bf71ea28793e738$export$10c5169755ce7bd7","_useContext","focusNext","opts","from","tabbable","wrap","accept","sentinel","previousElementSibling","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","$9bf71ea28793e738$var$getScopeRoot","currentNode","nextNode","$9bf71ea28793e738$var$focusElement","focusPrevious","length","nextElementSibling","previousNode","focusFirst","focusLast","$9bf71ea28793e738$var$focusableElements","$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR","join","$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR","$9bf71ea28793e738$var$shouldContainFocus","focusedNode","raf","cancelAnimationFrame","onKeyDown","e","key","altKey","ctrlKey","metaKey","focusedElement","nextElement","shiftKey","preventDefault","onFocus","target","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","body","addEventListener","forEach","removeEventListener","$9bf71ea28793e738$var$isElementInAnyScope","some","Element","closest","s","$9bf71ea28793e738$export$1258395f99bf9cbf","ancestor","_focusScopeTree_getTreeNode","scroll","err","err1","autoFocusRef","useRef","restore","$9bf71ea28793e738$var$shouldRestoreFocus","nodeToRestore","nodeToRestoreRef","stopPropagation","blur","clonedTree","clone","treeNode","selector","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","_opts_from","FILTER_REJECT","matches","FILTER_ACCEPT","FILTER_SKIP","$9bf71ea28793e738$export$c5251b9e124bf29","defaultOptions","next","$9bf71ea28793e738$var$last","last","lastChild","$9bf71ea28793e738$var$Tree","size","fastMap","data","get","addTreeNode","set","removeChild","child","delete","newTree","constructor","Map","add","undefined","Set","$f7dceffc5ad7768b$export$4e328f61c538687f","isTextInput","within","state","isFocused","isFocusVisible","setFocused","isFocusVisibleState","setFocusVisible","updateState","onFocusChange","focusProps","isDisabled","focusWithinProps","onFocusWithinChange","$907718708eab68af$export$1a38b4ad7f578e1d","focusClass","focusRingClass","Children","only","cloneElement","className","$e6afbd83fe6ebbd2$var$FocusableContext","$e6afbd83fe6ebbd2$var$useFocusableContext","context","_","otherProps","$e6afbd83fe6ebbd2$var$FocusableProvider","$e6afbd83fe6ebbd2$export$13f3202a3e5ddd5","forwardRef","$e6afbd83fe6ebbd2$export$4c014de7c8940b4c","domRef","keyboardProps","interactions","domProps","interactionProps","focusableProps","tabIndex","excludeFromTabOrder"],"sources":["packages/@react-aria/focus/src/index.ts","packages/@react-aria/focus/src/FocusScope.tsx","packages/@react-aria/focus/src/focusSafely.ts","packages/@react-aria/focus/src/isElementVisible.ts","packages/@react-aria/focus/src/FocusRing.tsx","packages/@react-aria/focus/src/useFocusRing.ts","packages/@react-aria/focus/src/useFocusable.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {FocusScope, useFocusManager, getFocusableTreeWalker, createFocusManager, isElementInChildOfActiveScope} from './FocusScope';\nexport {FocusRing} from './FocusRing';\nexport {FocusableProvider, useFocusable} from './useFocusable';\nexport {useFocusRing} from './useFocusRing';\nexport {focusSafely} from './focusSafely';\n\nexport type {FocusScopeProps, FocusManager, FocusManagerOptions} from './FocusScope';\nexport type {FocusRingProps} from './FocusRing';\nexport type {FocusableAria, FocusableOptions, FocusableProviderProps} from './useFocusable';\nexport type {AriaFocusRingProps, FocusRingAria} from './useFocusRing';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useMemo, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement\n}\n\ntype ScopeRef = RefObject<Element[]>;\ninterface IFocusContext {\n  focusManager: FocusManager,\n  parentNode: TreeNode | null\n}\n\nconst FocusContext = React.createContext<IFocusContext>(null);\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<Element[]>([]);\n  let {parentNode} = useContext(FocusContext) || {};\n\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = useMemo(() => new TreeNode({scopeRef}), [scopeRef]);\n\n  useLayoutEffect(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || focusScopeTree.root;\n    if (focusScopeTree.getTreeNode(parent.scopeRef) && activeScope && !isAncestorScope(activeScope, parent.scopeRef)) {\n      let activeNode = focusScopeTree.getTreeNode(activeScope);\n      if (activeNode) {\n        parent = activeNode;\n      }\n    }\n\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    focusScopeTree.addNode(node);\n  }, [node, parentNode]);\n\n  useLayoutEffect(() => {\n    let node = focusScopeTree.getTreeNode(scopeRef);\n    node.contain = contain;\n  }, [contain]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children]);\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n  useEffect(() => {\n    if (scopeRef) {\n      let activeElement = document.activeElement;\n      let scope = null;\n      // In strict mode, active scope is incorrectly updated since cleanup will run even though scope hasn't unmounted.\n      // To fix this, we need to update the actual activeScope here\n      if (isElementInScope(activeElement, scopeRef.current)) {\n        // Since useLayoutEffect runs for children first, we need to traverse the focusScope tree and find the bottom most scope that\n        // contains the active element and set that as the activeScope\n        for (let node of focusScopeTree.traverse()) {\n          if (isElementInScope(activeElement, node.scopeRef.current)) {\n            scope = node;\n          }\n        }\n\n        if (scope === focusScopeTree.getTreeNode(scopeRef)) {\n          activeScope = scope.scopeRef;\n        }\n      }\n\n      return () => {\n        // Scope may have been re-parented.\n        let parentScope = focusScopeTree.getTreeNode(scopeRef).parent.scopeRef;\n\n        // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n        if (\n          (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n          (!parentScope || focusScopeTree.getTreeNode(parentScope))\n        ) {\n          activeScope = parentScope;\n        }\n        focusScopeTree.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef]);\n\n  let focusManager = useMemo(() => createFocusManagerForScope(scopeRef), []);\n  let value = useMemo(() => ({\n    focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n\n  return (\n    <FocusContext.Provider value={value}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef(null);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(e.target, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (shouldContainFocus(scopeRef) && !isElementInChildScope(document.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if (activeScope) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element: Element, scope: Element[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) {\n    return true;\n  }\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element) {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  focusElement(nextNode as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[]>, restore: boolean, contain: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n\n    let onFocus = (e: FocusEvent) => {\n      let target = e.target as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus: boolean, contain: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? document.activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    if (!restoreFocus) {\n      return;\n    }\n\n    focusScopeTree.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        focusScopeTree.getTreeNode(scopeRef).nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          isElementInScope(document.activeElement, scopeRef.current)\n          || (document.activeElement === document.body && shouldRestoreFocus(scopeRef))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  addNode(node: TreeNode) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.size > 0) {\n      children.forEach(child => parentNode.addChild(child));\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.size > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore: FocusableElement;\n  public parent: TreeNode;\n  public children: Set<TreeNode> = new Set();\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\nexport interface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useState} from 'react';\nimport {useRef} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\nexport interface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusableProviderProps extends DOMAttributes {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<FocusableElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<FocusableElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<FocusableElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\nexport interface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: DOMAttributes\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<FocusableElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}